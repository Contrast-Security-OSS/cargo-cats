apiVersion: v1
kind: Service
metadata:
  name: '{{.Release.Name}}-db'
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - port: 3306
  selector:
    app: '{{.Release.Name}}-db'
  clusterIP: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{.Release.Name}}-db'
spec:
  selector:
    matchLabels:
      app: '{{.Release.Name}}-db'
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: '{{.Release.Name}}-db'
    spec:
      containers:
      - image: mysql:9
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          value: ""
        - name: MYSQL_ALLOW_EMPTY_PASSWORD
          value: "true"
        - name: MYSQL_DATABASE
          value: {{ .Values.mysql.database }}
        - name: MYSQL_USER
          value: {{ .Values.mysql.user }}
        - name: MYSQL_PASSWORD
          value: {{ .Values.mysql.password }}
        ports:
        - containerPort: 3306
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
        volumeMounts:
          - name: mysql-initdb
            mountPath: /docker-entrypoint-initdb.d # Directory for initialization scripts
      volumes:
       - name: mysql-initdb
         configMap:
          name: mysql-init-script # Name of the ConfigMap created earlier
          items:
            - key: init.sql
              path: a-init.sql # Name of the file in the container

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
  labels:
    app: mysql-cargo-cats # Label to associate with your app
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS credit_cards;
    GRANT ALL PRIVILEGES ON db.* TO 'cargocats'@'%' WITH GRANT OPTION;
    GRANT ALL PRIVILEGES ON credit_cards.* TO 'cargocats'@'%' WITH GRANT OPTION;
    FLUSH PRIVILEGES;
